from flask_appbuilder.security.manager import AUTH_DB, AUTH_OAUTH

# ---------------------------------------------------------
# Superset specific config
# ---------------------------------------------------------
SUPERSET_WORKERS = {{ superset_workers }}
SUPERSET_WEBSERVER_PORT = {{ superset_port }}
# ---------------------------------------------------------

# Your App secret key
SECRET_KEY = '{{ superset_secret_key }}'  # noqa

# The SQLAlchemy connection string.
# SQLALCHEMY_DATABASE_URI = 'sqlite:///' + os.path.join(DATA_DIR, 'superset.db')
# SQLALCHEMY_DATABASE_URI = 'mysql://myapp@localhost/myapp'
SQLALCHEMY_DATABASE_URI = '{{ superset_database_server_url }}'

# ------------------------------
# GLOBALS FOR APP Builder
# ------------------------------
# Uncomment to setup Your App name
APP_NAME = "{{ superset_app_name }}"

# ----------------------------------------------------
# AUTHENTICATION CONFIG
# ----------------------------------------------------
# The authentication type
# AUTH_OID : Is for OpenID
# AUTH_DB : Is for database (username/password()
# AUTH_LDAP : Is for LDAP
# AUTH_OAUTH : Is for oAuth
# AUTH_REMOTE_USER : Is for using REMOTE_USER from web server
AUTH_TYPE = {{ superset_auth_type }}

{% if superset_oauth_providers %}
OAUTH_PROVIDERS = [
{% for provider in superset_oauth_providers %}
{
    'name': '{{ provider.name }}',
    'icon': '{{ provider.icon }}',
    {% if provider.token_key is defined %}
    'token_key': '{{ provider.token_key }}',
    {% endif %}
    'remote_app': {
        'consumer_key': {{ provider.consumer_key }},
        'consumer_secret': {{ provider.consumer_secret }},
        'base_url': '{{ provider.base_url }}',
        {% if provider.request_token_params is defined %}
        # if provided this should be a json object
        'request_token_params': {{ provider.request_token_params }},
        {% endif %}
        {% if provider.request_token_url is defined %}
        'request_token_url': '{{ provider.request_token_url }}',
        {% endif %}
        {% if provider.access_token_method is defined %}
        'access_token_method': '{{ provider.access_token_method }}',
        {% endif %}
        {% if provider.custom_redirect_url is defined %}
        'custom_redirect_url': '{{ provider.custom_redirect_url }}',
        {% endif %}
        'access_token_url': '{{ provider.access_token_url }}',
        'authorize_url': '{{ provider.authorize_url }}'
    }
}{% if loop.index != loop.length %},{% endif %}
{% endfor %}
]

{% endif %}  # end superset_oauth_providers if block

# The allowed translation for you app
LANGUAGES = {
{% for language in superset_languages %}
    '{{ language.key }}': {'flag': '{{ language.flag }}', 'name': '{{ language.name }}'},
{% endfor %}
}

# The default user self registration role
AUTH_USER_REGISTRATION_ROLE = '{{ superset_auth_user_registration_role }}'
# Will allow user self registration
AUTH_USER_REGISTRATION = {{ superset_auth_user_registration }}
# Set public role like Gamma
PUBLIC_ROLE_LIKE_GAMMA = {{ superset_public_role_like_gamma }}

# ---------------------------------------------------
# Image and file configuration
# ---------------------------------------------------
# The file upload folder, when using models with files
UPLOAD_FOLDER = "{{ superset_upload_dir }}"

# The image upload folder, when using models with images
IMG_UPLOAD_FOLDER = "{{ superset_img_upload_dir }}"

# Set this API key to enable Mapbox visualizations
MAPBOX_API_KEY = "{{ superset_mapbox_api_key }}"

# CORS Options
ENABLE_CORS = {{ superset_enable_cors }}
{% if superset_cors_options %}
CORS_OPTIONS = {{ superset_cors_options }}
{% endif %}

# Allow for javascript controls components
# this enables programmers to customize certain charts (like the
# geospatial ones) by inputing javascript in controls. This exposes
# an XSS security vulnerability
ENABLE_JAVASCRIPT_CONTROLS = {{ superset_enable_javascript_controls }}

{% if superset_http_headers %}
# static http headers to be served by your Superset server.
# The following example prevents iFrame from other domains
# and "clickjacking" as a result
# HTTP_HEADERS = {'X-Frame-Options': 'SAMEORIGIN'}
HTTP_HEADERS = {{ superset_http_headers }}
{% endif %}

# Extract and use X-Forwarded-For/X-Forwarded-Proto headers?
ENABLE_PROXY_FIX = {{ superset_enable_proxy_fix }}

# Add custom roles
ADD_CUSTOM_ROLES = {{ superset_add_custom_roles }}
{% if superset_custom_roles %}
CUSTOM_ROLES = {{ superset_custom_roles }}
{% endif %}

# PATCHUP_EMAIL_BASE
{% if superset_patchup_email_base %}
PATCHUP_EMAIL_BASE = {{ superset_patchup_email_base }}
{% endif %}

{% if superset_allowed_extensions is defined and superset_allowed_extensions|length > 0 %}
# Allowed format types for upload on Database view
ALLOWED_EXTENSIONS = set(['{{ superset_allowed_extensions|join("', '") }}'])
{% endif %}

{% if superset_use_ketchup %}
import sys
import superset_patchup

superset_patchup.add_ketchup(sys.modules[__name__])
{% endif %}

{% if superset_enable_cache and superset_cache_config %}
# Superset caching config
CACHE_CONFIG = {{ superset_cache_config }}
CACHE_DEFAULT_TIMEOUT = {{ superset_cache_default_timeout }}
{% endif %}

{% if superset_enable_celerybeat and superset_celerybeat_schedule %}
# Superset celery task cache warmup configs
from celery.schedules import crontab
CELERYBEAT_SCHEDULE = {{ superset_celerybeat_schedule }}
{% endif %}

# Roles that are controlled by the API / Superset and should not be changes
# by humans.
ROBOT_PERMISSION_ROLES = {{ superset_robot_permission_roles }}

# Superset dashboard position json data limit
SUPERSET_DASHBOARD_POSITION_DATA_LIMIT = {{ superset_dashboard_position_data_limit }}

#
# Flask session cookie options
#
# See https://flask.palletsprojects.com/en/1.1.x/security/#set-cookie-options
# for details
#
SESSION_COOKIE_HTTPONLY = {{ superset_session_cookie_httponly }}  # Prevent cookie from being read by frontend JS?
SESSION_COOKIE_SECURE = {{ superset_session_cookie_secure }}  # Prevent cookie from being transmitted over non-tls?
# Be explicit in allowing embedding superset dashboards in other sites
# Ref: https://github.com/apache/incubator-superset/issues/8382
SESSION_COOKIE_SAMESITE = {{ superset_session_cookie_samesite }}  # One of [None, 'Lax', 'Strict']


# This is an important setting, and should be lower than your
# [load balancer / proxy / envoy / kong / ...] timeout settings.
# You should also make sure to configure your WSGI server
# (gunicorn, nginx, apache, ...) timeout setting to be <= to this setting
SUPERSET_WEBSERVER_TIMEOUT = {{ superset_webserver_timeout|default(60) }}

{% if sentry_dsn %}
import sentry_sdk
from sentry_sdk.integrations.flask import FlaskIntegration

sentry_sdk.init(
    dsn='{{ sentry_dsn }}',
    integrations=[FlaskIntegration()],
    release='{{ superset_version }}',
)
{% endif %}

LOG_LEVEL = '{{ superset_log_level }}'
